{"version":3,"file":"focus-trap.min.js","sources":["../src/focus-trap.js"],"sourcesContent":["/**\n * Retrieves all focusable elements within a given container.\n *\n * @param {HTMLElement} container - The container element to search for focusable elements.\n * @returns {HTMLElement[]} An array of focusable elements found within the container.\n */\nconst getFocusableElements = (container) => {\n\tconst focusableSelectors =\n\t\t'summary, a[href], button:not(:disabled), [tabindex]:not([tabindex^=\"-\"]):not(focus-trap-start):not(focus-trap-end), [draggable], area, input:not([type=hidden]):not(:disabled), select:not(:disabled), textarea:not(:disabled), object, iframe';\n\treturn Array.from(container.querySelectorAll(focusableSelectors));\n};\n\nclass FocusTrap extends HTMLElement {\n\t/** @type {boolean} Indicates whether the styles have been injected into the DOM. */\n\tstatic styleInjected = false;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.trapStart = null;\n\t\tthis.trapEnd = null;\n\n\t\t// Inject styles only once, when the first FocusTrap instance is created.\n\t\tif (!FocusTrap.styleInjected) {\n\t\t\tthis.injectStyles();\n\t\t\tFocusTrap.styleInjected = true;\n\t\t}\n\t}\n\n\t/**\n\t * Injects necessary styles for the focus trap into the document's head.\n\t * This ensures that focus-trap-start and focus-trap-end elements are hidden.\n\t */\n\tinjectStyles() {\n\t\tconst style = document.createElement('style');\n\t\tstyle.textContent = `\n      focus-trap-start,\n      focus-trap-end {\n        position: absolute;\n        width: 1px;\n        height: 1px;\n        margin: -1px;\n        padding: 0;\n        border: 0;\n        clip: rect(0, 0, 0, 0);\n        overflow: hidden;\n        white-space: nowrap;\n      }\n    `;\n\t\tdocument.head.appendChild(style);\n\t}\n\n\t/**\n\t * Called when the element is connected to the DOM.\n\t * Sets up the focus trap and adds the keydown event listener.\n\t */\n\tconnectedCallback() {\n\t\tthis.setupTrap();\n\t\tthis.addEventListener('keydown', this.handleKeyDown);\n\t}\n\n\t/**\n\t * Called when the element is disconnected from the DOM.\n\t * Removes the keydown event listener.\n\t */\n\tdisconnectedCallback() {\n\t\tthis.removeEventListener('keydown', this.handleKeyDown);\n\t}\n\n\t/**\n\t * Sets up the focus trap by adding trap start and trap end elements.\n\t * Focuses the trap start element to initiate the focus trap.\n\t */\n\tsetupTrap() {\n\t\tconst focusableElements = getFocusableElements(this);\n\t\tif (focusableElements.length === 0) return;\n\n\t\tthis.trapStart = document.createElement('focus-trap-start');\n\t\tthis.trapEnd = document.createElement('focus-trap-end');\n\n\t\tthis.prepend(this.trapStart);\n\t\tthis.append(this.trapEnd);\n\n\t\trequestAnimationFrame(() => {\n\t\t\tthis.trapStart.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Handles the keydown event. If the Escape key is pressed, the focus trap is exited.\n\t *\n\t * @param {KeyboardEvent} e - The keyboard event object.\n\t */\n\thandleKeyDown = (e) => {\n\t\tif (e.key === 'Escape') {\n\t\t\te.preventDefault();\n\t\t\tthis.exitTrap();\n\t\t}\n\t};\n\n\t/**\n\t * Exits the focus trap by hiding the current container and shifting focus\n\t * back to the trigger element that opened the trap.\n\t */\n\texitTrap() {\n\t\tconst container = this.closest('[aria-hidden=\"false\"]');\n\t\tif (!container) return;\n\n\t\tcontainer.setAttribute('aria-hidden', 'true');\n\n\t\tconst trigger = document.querySelector(\n\t\t\t`[aria-expanded=\"true\"][aria-controls=\"${container.id}\"]`\n\t\t);\n\t\tif (trigger) {\n\t\t\ttrigger.setAttribute('aria-expanded', 'false');\n\t\t\ttrigger.focus();\n\t\t}\n\t}\n}\n\nclass FocusTrapStart extends HTMLElement {\n\t/**\n\t * Called when the element is connected to the DOM.\n\t * Sets the tabindex and adds the focus event listener.\n\t */\n\tconnectedCallback() {\n\t\tthis.setAttribute('tabindex', '0');\n\t\tthis.addEventListener('focus', this.handleFocus);\n\t}\n\n\t/**\n\t * Called when the element is disconnected from the DOM.\n\t * Removes the focus event listener.\n\t */\n\tdisconnectedCallback() {\n\t\tthis.removeEventListener('focus', this.handleFocus);\n\t}\n\n\t/**\n\t * Handles the focus event. If focus moves backwards from the first focusable element,\n\t * it is cycled to the last focusable element, and vice versa.\n\t *\n\t * @param {FocusEvent} e - The focus event object.\n\t */\n\thandleFocus = (e) => {\n\t\tconst trap = this.closest('focus-trap');\n\t\tconst focusableElements = getFocusableElements(trap);\n\n\t\tif (focusableElements.length === 0) return;\n\n\t\tconst firstElement = focusableElements[0];\n\t\tconst lastElement =\n\t\t\tfocusableElements[focusableElements.length - 1];\n\n\t\tif (e.relatedTarget === firstElement) {\n\t\t\tlastElement.focus();\n\t\t} else {\n\t\t\tfirstElement.focus();\n\t\t}\n\t};\n}\n\nclass FocusTrapEnd extends HTMLElement {\n\t/**\n\t * Called when the element is connected to the DOM.\n\t * Sets the tabindex and adds the focus event listener.\n\t */\n\tconnectedCallback() {\n\t\tthis.setAttribute('tabindex', '0');\n\t\tthis.addEventListener('focus', this.handleFocus);\n\t}\n\n\t/**\n\t * Called when the element is disconnected from the DOM.\n\t * Removes the focus event listener.\n\t */\n\tdisconnectedCallback() {\n\t\tthis.removeEventListener('focus', this.handleFocus);\n\t}\n\n\t/**\n\t * Handles the focus event. When the trap end is focused, focus is shifted back to the trap start.\n\t */\n\thandleFocus = () => {\n\t\tconst trap = this.closest('focus-trap');\n\t\tconst trapStart = trap.querySelector('focus-trap-start');\n\t\ttrapStart.focus();\n\t};\n}\n\ncustomElements.define('focus-trap', FocusTrap);\ncustomElements.define('focus-trap-start', FocusTrapStart);\ncustomElements.define('focus-trap-end', FocusTrapEnd);\n\n/**\n * Global keydown event listener.\n * Listens for the Enter key to trigger focus trapping on the associated panel.\n *\n * @param {KeyboardEvent} e - The keyboard event object.\n */\ndocument.addEventListener('keydown', function (e) {\n\tif (e.key !== 'Enter') return;\n\tconst trigger = e.target.closest('[aria-controls]');\n\tif (!trigger) return;\n\n\te.preventDefault();\n\n\tconst panelId = trigger.getAttribute('aria-controls');\n\tconst panel = document.getElementById(panelId);\n\tif (!panel) return;\n\tconst trapStart = panel.querySelector('focus-trap-start');\n\tif (!trapStart) return;\n\n\ttrigger.setAttribute('aria-expanded', 'true');\n\tpanel.setAttribute('aria-hidden', 'false');\n\n\trequestAnimationFrame(() => {\n\t\ttrapStart.focus();\n\t});\n});\n"],"names":["getFocusableElements","container","Array","from","querySelectorAll","FocusTrap","HTMLElement","static","constructor","super","this","trapStart","trapEnd","styleInjected","injectStyles","style","document","createElement","textContent","head","appendChild","connectedCallback","setupTrap","addEventListener","handleKeyDown","disconnectedCallback","removeEventListener","length","prepend","append","requestAnimationFrame","focus","e","key","preventDefault","exitTrap","closest","setAttribute","trigger","querySelector","id","FocusTrapStart","handleFocus","trap","focusableElements","firstElement","lastElement","relatedTarget","FocusTrapEnd","customElements","define","target","panelId","getAttribute","panel","getElementById"],"mappings":"yBAMA,MAAMA,EAAwBC,GAGtBC,MAAMC,KAAKF,EAAUG,iBAD3B,mPAIF,MAAMC,UAAkBC,YAEvBC,sBAAuB,EAEvB,WAAAC,GACCC,QACAC,KAAKC,UAAY,KACjBD,KAAKE,QAAU,KAGVP,EAAUQ,gBACdH,KAAKI,eACLT,EAAUQ,eAAgB,EAE3B,CAMD,YAAAC,GACC,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,YAAc,qSAcpBF,SAASG,KAAKC,YAAYL,EAC1B,CAMD,iBAAAM,GACCX,KAAKY,YACLZ,KAAKa,iBAAiB,UAAWb,KAAKc,cACtC,CAMD,oBAAAC,GACCf,KAAKgB,oBAAoB,UAAWhB,KAAKc,cACzC,CAMD,SAAAF,GAEkC,IADPtB,EAAqBU,MACzBiB,SAEtBjB,KAAKC,UAAYK,SAASC,cAAc,oBACxCP,KAAKE,QAAUI,SAASC,cAAc,kBAEtCP,KAAKkB,QAAQlB,KAAKC,WAClBD,KAAKmB,OAAOnB,KAAKE,SAEjBkB,uBAAsB,KACrBpB,KAAKC,UAAUoB,OAAO,IAEvB,CAODP,cAAiBQ,IACF,WAAVA,EAAEC,MACLD,EAAEE,iBACFxB,KAAKyB,WACL,EAOF,QAAAA,GACC,MAAMlC,EAAYS,KAAK0B,QAAQ,yBAC/B,IAAKnC,EAAW,OAEhBA,EAAUoC,aAAa,cAAe,QAEtC,MAAMC,EAAUtB,SAASuB,cACxB,yCAAyCtC,EAAUuC,QAEhDF,IACHA,EAAQD,aAAa,gBAAiB,SACtCC,EAAQP,QAET,EAGF,MAAMU,UAAuBnC,YAK5B,iBAAAe,GACCX,KAAK2B,aAAa,WAAY,KAC9B3B,KAAKa,iBAAiB,QAASb,KAAKgC,YACpC,CAMD,oBAAAjB,GACCf,KAAKgB,oBAAoB,QAAShB,KAAKgC,YACvC,CAQDA,YAAeV,IACd,MAAMW,EAAOjC,KAAK0B,QAAQ,cACpBQ,EAAoB5C,EAAqB2C,GAE/C,GAAiC,IAA7BC,EAAkBjB,OAAc,OAEpC,MAAMkB,EAAeD,EAAkB,GACjCE,EACLF,EAAkBA,EAAkBjB,OAAS,GAE1CK,EAAEe,gBAAkBF,EACvBC,EAAYf,QAEZc,EAAad,OACb,EAIH,MAAMiB,UAAqB1C,YAK1B,iBAAAe,GACCX,KAAK2B,aAAa,WAAY,KAC9B3B,KAAKa,iBAAiB,QAASb,KAAKgC,YACpC,CAMD,oBAAAjB,GACCf,KAAKgB,oBAAoB,QAAShB,KAAKgC,YACvC,CAKDA,YAAc,KACAhC,KAAK0B,QAAQ,cACHG,cAAc,oBAC3BR,OAAO,EAInBkB,eAAeC,OAAO,aAAc7C,GACpC4C,eAAeC,OAAO,mBAAoBT,GAC1CQ,eAAeC,OAAO,iBAAkBF,GAQxChC,SAASO,iBAAiB,WAAW,SAAUS,GAC9C,GAAc,UAAVA,EAAEC,IAAiB,OACvB,MAAMK,EAAUN,EAAEmB,OAAOf,QAAQ,mBACjC,IAAKE,EAAS,OAEdN,EAAEE,iBAEF,MAAMkB,EAAUd,EAAQe,aAAa,iBAC/BC,EAAQtC,SAASuC,eAAeH,GACtC,IAAKE,EAAO,OACZ,MAAM3C,EAAY2C,EAAMf,cAAc,oBACjC5B,IAEL2B,EAAQD,aAAa,gBAAiB,QACtCiB,EAAMjB,aAAa,cAAe,SAElCP,uBAAsB,KACrBnB,EAAUoB,OAAO,IAEnB"}